
synchronized 同步关键字，互斥锁机制，同一时刻只能有一个线程能够获取锁，Java中每个类都有一个内置锁。

通过编译的class文件可以看到，synchronized代码块使用monitorenter和monitorexit两个命令来获取锁标记和释放锁标记，而synchronized方法使用ACC_SYNCHRONIZED来完成锁的获取和释放。

1、如果同一个方法有多个线程访问，那么每个线程都有自己的线程拷贝。
2、类的实例都有自己的对象锁，如果一个线程成功获取到该实例的对象锁，那么其他实例获取该实例的对象锁时需要堵塞等待，直到该实例的对象锁被释放。对象锁可以作用在同步方法或者同步代码块中。
3、如果不同的线程访问的是不同实例的对象锁，那么不会互相堵塞。
4、获得实例的对象锁的线程会让其他想要获取相同实例锁的线程堵塞在synchronized代码外，多个方法也是如此。
5、持有一个实例的对象锁不会阻止该线程被置换出来，也不会堵塞其他线程执行非synchronized方法，因为非synchronized方法在执行的时候不需要获取实例的对象锁。
6、使用同步代码块的时候，括号的对象可以为任意的Object对象，当为this时，代表当前对象的对象锁。
7、类锁主要控制对static成员变量的并发访问。
8、synchronized同步块（同步方法或者同步代码块）是可重入的，每次重入会把锁的计数器加1，每次退出将计数器减1，当计数器的值为0时锁便被释放了。
